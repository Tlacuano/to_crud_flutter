AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  api-barca

  Sample SAM Template for api-barca

Globals:
  Function:
    Timeout: 120
    MemorySize: 256
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - apigateway:POST
                  - apigateway:GET
                  - apigateway:PUT
                  - apigateway:DELETE
                  - apigateway:OPTIONS
                  - apigateway:PATCH
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:InvokeAsync
                  - lambda:GetFunction
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:PutFunctionConcurrency
                  - lambda:DeleteFunction
                  - lambda:ListVersionsByFunction
                  - lambda:ListAliases
                  - lambda:ListTags
                  - lambda:ListFunctions
                  - lambda:GetFunctionConfiguration
                  - lambda:GetPolicy
                  - lambda:CreateAlias
                  - lambda:DeleteAlias
                  - lambda:TagResource
                  - lambda:UntagResource
                  - lambda:PublishVersion
                  - lambda:PutFunctionEventInvokeConfig
                  - lambda:DeleteFunctionEventInvokeConfig
                  - lambda:ListFunctionEventInvokeConfigs
                  - lambda:ListProvisionedConcurrencyConfigs
                  - lambda:GetProvisionedConcurrencyConfig
                  - lambda:PutProvisionedConcurrencyConfig
                  - lambda:DeleteProvisionedConcurrencyConfig
                Resource: "*"

  GetBarcasFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get_barcas/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetAllMissions:
          Type: Api
          Properties:
            RestApiId: !Ref BarcaApi
            Path: /get_barcas
            Method: get

  RegisterBarcaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/register_barca/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertMission:
          Type: Api
          Properties:
            RestApiId: !Ref BarcaApi
            Path: /register_barca
            Method: post

  UpdateBarcaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/update_barca/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetOneMission:
          Type: Api
          Properties:
            RestApiId: !Ref BarcaApi
            Path: /update_barca
            Method: post

  DeleteBarcaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/delete_barca/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        CompleteMission:
          Type: Api
          Properties:
            RestApiId: !Ref BarcaApi
            Path: /delete_barca
            Method: post

  BarcaApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: BarcaApi
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

Outputs:
  LambdaExecutionRoleArn:
    Description: "Implicit IAM Role created for Lambda function"
    Value: !GetAtt LambdaExecutionRole.Arn

  GetBarcasApiUrl:
    Description: "API Gateway endpoint URL for Prod stage for GetBarcas function"
    Value: !Sub "https://${BarcaApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_barcas/"
  RegisterBarcaApiUrl:
    Description: "API Gateway endpoint URL for Prod stage for RegisterBarca function"
    Value: !Sub "https://${BarcaApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/register_barca/"
  UpdateBarcaApiUrl:
    Description: "API Gateway endpoint URL for Prod stage for UpdateBarca function"
    Value: !Sub "https://${BarcaApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update_barca/"
  DeleteBarcaApiUrl:
    Description: "API Gateway endpoint URL for Prod stage for DeleteBarca function"
    Value: !Sub "https://${BarcaApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/delete_barca/"

  GetBarcasFunctionArn:
    Description: "GetBarcas Lambda Function ARN"
    Value: !GetAtt GetBarcasFunction.Arn
  RegisterBarcaFunctionArn:
    Description: "RegisterBarca Lambda Function ARN"
    Value: !GetAtt RegisterBarcaFunction.Arn
  UpdateBarcaFunctionArn:
    Description: "UpdateBarca Lambda Function ARN"
    Value: !GetAtt UpdateBarcaFunction.Arn
  DeleteBarcaFunctionArn:
    Description: "DeleteBarca Lambda Function ARN"
    Value: !GetAtt DeleteBarcaFunction.Arn
